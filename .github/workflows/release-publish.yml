name: Release & Publish

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Force specific release type (optional)'
        required: false
        type: choice
        options:
          - auto
          - patch
          - minor
          - major
        default: 'auto'
      release_notes:
        description: 'Release notes'
        required: false
        type: string
        default: ''

jobs:
  version-and-publish:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'
      
      - name: Configure Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
      
      - name: Install dependencies
        run: npm install
      
      - name: Commit changes if working directory is not clean
        run: |
          if [[ -n "$(git status --porcelain)" ]]; then
            git add .
            git commit -m "chore: update dependencies [skip ci]"
          fi
      
      - name: Get current version
        id: current_version
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
      
      - name: Determine version bump
        id: version
        run: |
          if [ "${{ github.event.inputs.release_type }}" != "auto" ]; then
            echo "bump=${{ github.event.inputs.release_type }}" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          COMMITS=$(git log $(git describe --tags --abbrev=0 2>/dev/null || git rev-list --max-parents=0 HEAD)..HEAD --format=%s)
          
          if echo "$COMMITS" | grep -q "^feat\|^feat(.*):"; then
            echo "bump=major" >> $GITHUB_OUTPUT
          elif echo "$COMMITS" | grep -q "^chore\|^chore(.*):"; then
            echo "bump=minor" >> $GITHUB_OUTPUT
          elif echo "$COMMITS" | grep -q "^fix\|^fix(.*):"; then
            echo "bump=patch" >> $GITHUB_OUTPUT
          else
            echo "bump=patch" >> $GITHUB_OUTPUT
          fi
      
      - name: Remove existing version tag if exists
        run: |
          CURRENT_VERSION="${{ steps.current_version.outputs.version }}"
          if git rev-parse "v$CURRENT_VERSION" >/dev/null 2>&1; then
            git tag -d "v$CURRENT_VERSION"
            git push origin ":refs/tags/v$CURRENT_VERSION" || true
          fi
      
      - name: Bump version
        run: |
          RELEASE_NOTES="${{ github.event.inputs.release_notes }}"
          if [ -n "$RELEASE_NOTES" ]; then
            npm version ${{ steps.version.outputs.bump }} -m "chore: bump version to %s [skip ci]

            $RELEASE_NOTES" --force
          else
            npm version ${{ steps.version.outputs.bump }} -m "chore: bump version to %s [skip ci]" --force
          fi
      
      - name: Build
        run: npm run build
      
      - name: Create GitHub Release
        if: github.event.inputs.release_notes != ''
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.current_version.outputs.version }}
          body: ${{ github.event.inputs.release_notes }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update package.json with release notes
        if: github.event.inputs.release_notes != ''
        run: |
          node -e '
            const fs = require("fs");
            const pkg = JSON.parse(fs.readFileSync("package.json"));
            pkg.releaseNotes = process.env.RELEASE_NOTES;
            fs.writeFileSync("package.json", JSON.stringify(pkg, null, 2) + "\n");
          ' 
        env:
          RELEASE_NOTES: ${{ github.event.inputs.release_notes }}
      
      - name: Publish to NPM
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      
      - name: Push changes
        run: git push --follow-tags
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 